package com.amb.photo.ui.activities.editor

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyListState
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.zIndex
import com.amb.photo.ui.theme.AppColor
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.launch
import kotlin.math.roundToInt

// Ph·∫°m vi gi√° tr·ªã c·ªßa th∆∞·ªõc ƒëo
private const val MIN_VALUE = -30
private const val MAX_VALUE = 30
private const val TOTAL_TICKS = MAX_VALUE - MIN_VALUE + 1 // 61 v·∫°ch

// K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh c·ªßa slot (v·∫°ch + kho·∫£ng tr·ªëng)
private val TICK_WIDTH = 9.dp

@Composable
fun RulerSelector(
    modifier: Modifier = Modifier
) {
    val listState = rememberLazyListState()
    val density = LocalDensity.current

    // ƒê·ªô r·ªông c·ªßa 1 v·∫°ch chia (TICK_WIDTH) t√≠nh b·∫±ng Pixel
    val tickWidthPx = remember { with(density) { TICK_WIDTH.toPx() } }

    // T√≠nh to√°n kho·∫£ng c√°ch t√¢m m√†n h√¨nh (ViewPort Center)
    val viewportCenter = remember {
        derivedStateOf { listState.layoutInfo.viewportSize.width / 2 }
    }
    val contentPaddingDp = with(density) { viewportCenter.value.toDp() }

    // üåü LOGIC C·∫¨P NH·∫¨T GI√Å TR·ªä LI√äN T·ª§C üåü
    // T√≠nh to√°n gi√° tr·ªã hi·ªán t·∫°i d·ª±a tr√™n v·ªã tr√≠ cu·ªôn (Scroll Offset)
    val currentValue by remember {
        derivedStateOf {
            if (listState.layoutInfo.totalItemsCount == 0) {
                return@derivedStateOf 0
            }

            // Index c·ªßa item ƒë·∫ßu ti√™n hi·ªÉn th·ªã
            val firstIndex = listState.firstVisibleItemIndex
            // Scroll offset (px) c·ªßa item ƒë·∫ßu ti√™n hi·ªÉn th·ªã
            val firstOffset = listState.firstVisibleItemScrollOffset

            // S·ªë l∆∞·ª£ng v·∫°ch chia b·ªã che khu·∫•t (t√≠nh b·∫±ng TICKs)
            // V√¨ ch√∫ng ta d√πng contentPadding = viewportCenter, v·ªã tr√≠ cu·ªôn
            // ƒë√£ ƒë∆∞·ª£c cƒÉn ch·ªânh ƒë·ªÉ start of the list = center of the screen
            val ticksScrolled = firstOffset / tickWidthPx

            // Index t∆∞∆°ng ·ª©ng v·ªõi v·ªã tr√≠ ·ªü t√¢m (t·ª´ 0 ƒë·∫øn 60)
            val centerIndexFloat = firstIndex + ticksScrolled

            // L√†m tr√≤n ƒë·ªÉ hi·ªÉn th·ªã gi√° tr·ªã nguy√™n g·∫ßn nh·∫•t
            val centerIndex = centerIndexFloat.roundToInt()

            // √Ånh x·∫° Index v·ªÅ Gi√° tr·ªã: Index (0..60) -> Value (-30..30)
            (centerIndex.coerceIn(0, TOTAL_TICKS - 1) + MIN_VALUE)
        }
    }

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu l√† 0 (index 30)
    // C·∫ßn LaunchedEffect ƒë·ªÉ ƒë·∫£m b·∫£o viewportCenter ƒë√£ c√≥ gi√° tr·ªã
    LaunchedEffect(viewportCenter.value) {
        if (viewportCenter.value > 0) {
            // Cu·ªôn ƒë·∫øn item index 30 (t∆∞∆°ng ·ª©ng v·ªõi gi√° tr·ªã 0) v·ªõi offset = 0
            listState.scrollToItem(30, 0)
        }
    }

    // ----------------------------------------------------------------------
    // 2. Giao di·ªán (UI) - Ch·ªâ d√πng currentValue ƒë√£ t√≠nh to√°n
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        // V√πng hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i
        Card(
            modifier = Modifier.padding(16.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0xFFF0F0F0)),
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
        ) {
            Text(
                text = currentValue.toString(),
                fontSize = 28.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                modifier = Modifier.padding(horizontal = 24.dp, vertical = 8.dp)
            )
        }

        Spacer(modifier = Modifier.height(30.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            contentAlignment = Alignment.Center
        ) {

            // Thanh Active m√†u xanh ·ªü gi·ªØa (Centre Mark)
            Spacer(
                modifier = Modifier
                    .width(3.dp)
                    .height(35.dp)
                    .background(Color(0xFF6200EE))
                    .zIndex(1f)
            )

            // LazyRow ch·ª©a c√°c v·∫°ch chia
            LazyRow(
                state = listState,
                modifier = Modifier
                    .fillMaxWidth(),
                // ƒê·∫∑t padding b·∫±ng m·ªôt n·ª≠a viewport ƒë·ªÉ cƒÉn ch·ªânh item 0 v√†o t√¢m
                contentPadding = PaddingValues(horizontal = contentPaddingDp),
                horizontalArrangement = Arrangement.spacedBy(TICK_WIDTH),
                verticalAlignment = Alignment.CenterVertically
            ) {
                items(TOTAL_TICKS) { index ->
                    // Index (0..60) -> Value (-30..30)
                    val value = index + MIN_VALUE
                    TickMark(value = value)
                }
            }
        }
    }
}

// H√†m Composable cho m·ªôt v·∫°ch chia ƒë∆°n l·∫ª
@Composable
fun TickMark(value: Int) {
    // Chi·ªÅu cao c·ªßa v·∫°ch
    val height = when {
        value % 10 == 0 -> 28.dp // V·∫°ch ch√≠nh (0, +-10, +-20, +-30)
        value % 5 == 0 -> 20.dp  // V·∫°ch trung b√¨nh
        else -> 12.dp            // V·∫°ch nh·ªè
    }
    // M√†u s·∫Øc
    val color = when {
        value % 10 == 0 -> AppColor.Gray400
        else -> {
            Color(0xFFD0D5DD)
        }
    }

    val width = when {
        value % 10 == 0 -> 2.dp
        else -> 1.dp
    }
    // V·∫°ch
    Spacer(
        modifier = Modifier
            .width(width) // ƒê·ªô d√†y c·ªßa v·∫°ch
            .height(height)
            .background(color)
    )
    // Kho·∫£ng c√°ch gi·ªØa c√°c v·∫°ch
//    Spacer(modifier = Modifier.width(TICK_WIDTH))
}

// -----------------------------------------------------------------------------------
// V√ç D·ª§ S·ª¨ D·ª§NG:
// Th√™m h√†m n√†y v√†o Activity/Fragment c·ªßa b·∫°n:
@Composable
fun PreviewRulerSelector() {
    RulerSelector()
}